@using XBCADAttendance.Models.ViewModels
@model AdminViewModel
@{
    Layout = "_AdminLayout";
}

<div class="head-title">
    <div class="left">
        <h1>Lecture Report</h1>
        <ul class="breadcrumb">
            <li><a href="#">Home</a></li>
            <li><i class='bx bx-chevron-right'></i></li>
            <li><a class="active" href="#">Lecture Report</a></li>
        </ul>
    </div>
</div>
<div class="table-data">
    <div class="order">
        <table>
            <thead>
                <tr>
                    <th class="ree"></th>
                    <th class="ree">Lecturer</th>
                    <th class="ree">Module</th>
                    <th class="ree">Classroom</th>
                    <th class="ree">Date</th>
                    <th class="ree">Start</th>
                    <th class="ree">Finish</th>
                    @* <th class="ree"></th> *@
                </tr>
            </thead>
            <tbody>
                @foreach (var lecture in Model.StaffLectures)
                {
                    <tr class="accordion-toggle" onclick="toggleAccordion(this)" data-id="@lecture.LectureId">
                        <td><i class="bx bx-chevron-down"></i></td>
                        <td>@Model.GetLecturer(lecture)</td>
                        <td>@lecture.ModuleCode</td>
                        <td>@lecture.ClassroomCode</td>
                        <td>@lecture.Date</td>
                        <td>@lecture.Start</td>
                        <td>@lecture.Finish</td>
                        @* <td>
                            <button class="edit-button" style="background-color: transparent; border: none; color: var(--blue);" onclick="openEditModal(this, event)"
                                    data-id="@lecture.LectureId"
                                    data-lecturer="@Model.GetLecturer(lecture)"
                                    data-module="@lecture.ModuleCode"
                                    data-classroom="@lecture.ClassroomCode"
                                    data-date="@lecture.Date"
                                    data-start="@lecture.Start"
                                    data-finish="@lecture.Finish">
                                Manage
                            </button> 
                        </td>*@
                    </tr>
                    var students = await Model.GetStudentsFromLecture(lecture.LectureId);
                    if (students != null && students.Count > 0)
                    {
                        <tr class="accordion-content">
                            <th colspan="1"></th>
                            <th colspan="6" class="ree">Students Attended</th>
                        </tr>
                    }

                    <!-- Hidden rows showing each user’s details -->
                    @foreach (var student in students)
                    {
                        <tr class="accordion-content">
                            <td colspan="1"></td>
                            <td colspan="7">@student.StudentNo  -  @student.User.UserName</td>

                        </tr>

                    }
                }
            </tbody>
        </table>
    </div>
</div>

<div id="editModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeEditModal()">&times;</span>
        <h2>Edit Lecture Details</h2>
        <form id="editForm">
            <input type="hidden" id="lectureId" name="lectureId" />
            <label for="lecturer">Lecturer:</label>
            <input type="text" id="lecturer" name="lecturer" />

            <label for="module">Module:</label>
            <input type="text" id="module" name="module" />

            <label for="classroom">Classroom:</label>
            <input type="text" id="classroom" name="classroom" />

            <label for="date">Date:</label>
            <input type="date" id="date" name="date" />

            <label for="start">Start Time:</label>
            <input type="time" id="start" name="start" />

            <label for="finish">Finish Time:</label>
            <input type="time" id="finish" name="finish" />

            <button type="button" style="background-color: var(--light-blue); color: var(--blue);" onclick="saveEdit()">Save Changes</button>
        </form>
    </div>
</div>

<script>
    // Function to toggle accordion rows
    function toggleAccordion(element) {
        const icon = element.querySelector(".bx-chevron-down");

        // Find all sibling rows that are accordion-content rows
        let contentRows = [];
        let currentRow = element.nextElementSibling;
        while (currentRow && currentRow.classList.contains("accordion-content")) {
            contentRows.push(currentRow);
            currentRow = currentRow.nextElementSibling;
        }

        // Toggle visibility of each accordion content row
        let isOpen = contentRows[0].style.display === "table-row";
        contentRows.forEach(row => {
            row.style.display = isOpen ? "none" : "table-row";
        });

        // Toggle the chevron state
        if (icon) {
            icon.classList.toggle("open", !isOpen);
        }
    }

    // Initialize accordion states on page load
    document.addEventListener("DOMContentLoaded", () => {
        const toggles = document.querySelectorAll(".accordion-toggle");

        toggles.forEach(toggle => {
            const icon = toggle.querySelector(".bx-chevron-down");
            let contentRows = [];
            let currentRow = toggle.nextElementSibling;

            while (currentRow && currentRow.classList.contains("accordion-content")) {
                contentRows.push(currentRow);
                currentRow = currentRow.nextElementSibling;
            }

            // Ensure all rows are initially hidden and chevron is closed
            contentRows.forEach(row => (row.style.display = "none"));
            if (icon) {
                icon.classList.remove("open");
            }
        });
    });
    
</script>
@*<style>
     .modal {
        display: none; /* Hidden by default */
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 4% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    /* Flex column styling for the form */
    #editForm {
        display: flex;
        flex-direction: column;
        gap: 1rem; /* Spacing between elements */
    }

        #editForm label {
            font-weight: bold;
        }

        #editForm input {
            width: 100%;
            padding: 0.5rem;
            font-size: 1rem;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }

        #editForm button {
            width: 100%;
            padding: 0.7rem;
            font-size: 1rem;
            font-weight: bold;
            color: #fff;
            background-color: #007BFF;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            #editForm button:hover {
                background-color: #0056b3;
            }
</style> *@